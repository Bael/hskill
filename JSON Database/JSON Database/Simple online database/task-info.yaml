type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;
    import java.net.UnknownHostException;

    public class Main {

        public static void main(String[] args) throws IOException {
            String address = "127.0.0.1";
            int port = 23456;
            ClientDBConnection clientDBConnection = ClientDBConnection.connect(address, port);
            System.out.println("Client started!");
            clientDBConnection.exchange("Give me a record # 1");


        }

        public static class ClientDBConnection {

            private final Socket socket;
            private final DataInputStream dataInputStream;
            private final DataOutputStream dataOutputStream;
            private ClientDBConnection(Socket socket, DataInputStream dataInputStream, DataOutputStream dataOutputStream) {
                this.socket = socket;
                this.dataInputStream = dataInputStream;
                this.dataOutputStream = dataOutputStream;
            }

            public static ClientDBConnection connect(String address, int port) throws IOException {
                Socket socket = new Socket(InetAddress.getByName(address), port);
                DataInputStream input = new DataInputStream(socket.getInputStream());
                DataOutputStream output = new DataOutputStream(socket.getOutputStream());
                return new ClientDBConnection(socket, input, output);
            }

            public String exchange(String command) throws IOException {
                System.out.println("Sent: " + command);
                dataOutputStream.writeUTF(command);

                String response = dataInputStream.readUTF();
                System.out.println("Received: " + response);
                return response;
            }
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    import java.io.*;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.net.UnknownHostException;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;

    public class Main {

        public static void main(String[] args) throws IOException {
            String address = "127.0.0.1";
            int port = 23456;

            JsonDBServer server = JsonDBServer.createServer(address, port);
            System.out.println("Server started!");

            server.accept();

        }

        public static class JsonDBServer {

            private JsonDBServer(ServerSocket server) {
                this.server = server;
            }

            private final ServerSocket server;

            public static JsonDBServer createServer(String address, int port) throws IOException {
                ServerSocket server = new ServerSocket(port, 50, InetAddress.getByName(address));
                return new JsonDBServer(server);
            }

            public void accept() throws IOException {
                Socket socket = server.accept();
                DataInputStream input = new DataInputStream(socket.getInputStream());
                DataOutputStream output  = new DataOutputStream(socket.getOutputStream());

                String command = input.readUTF();
                System.out.println("Received: " + command);
                Pattern pattern = Pattern.compile("\\d+");
                Matcher m = pattern.matcher(command);
                m.find();
                String number = command.substring(m.start(), m.end());
                String response = "A record # " + number + " was sent!";
                System.out.println("Sent: " + response);
                output.writeUTF(response);

            }




        }
        public static void mainOld(String[] args) throws IOException {
    //        Scanner scanner = new Scanner(System.in);

            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            // start coding here
            Engine engine = new Engine(100);
            Command command = getCommand(reader);
            while (command.action != ActionType.EXIT) {
                String response = engine.execute(command);
                System.out.println(response);

                // new cycle
                command = getCommand(reader);
            }
        }

        private static Command getCommand(BufferedReader reader) throws IOException {
    //    private static Command getCommand(Scanner reader) throws IOException {
            Command command;
            String raw = reader.readLine();
            if (raw.toLowerCase().startsWith("exit")) {
                return new Command(ActionType.EXIT, 0);
            }

            List<String> params = new ArrayList<>();
            int firstIndex = raw.indexOf(" ");
            params.add(raw.substring(0, firstIndex));

            Pattern pattern = Pattern.compile("\\d+");
            String secondPart = raw.substring(firstIndex);
            Matcher matcher = pattern.matcher(secondPart);
            // нашли индекс
            int index = -1;
            String body = null;
            if (matcher.find()) {
                String indexStr = secondPart.substring(matcher.start(), matcher.end());
                params.add(indexStr);
                if (secondPart.length() > matcher.end()) {
                    params.add(secondPart.substring(matcher.end() + 1));
                }
            } else {
                throw new RuntimeException("Error in input " + raw);
            }
    //        System.out.println(params);
            command = parse(params);
            return command;
        }

        private static class Engine {
            public Engine(int limit) {
                memory = new String[limit];
            }

            private final String[] memory;

            public String set(int index, String body) {
                if (!validateIndex(index)) {
                    return "ERROR";
                }
                internalSet(index, body);
                return "OK";
            }

            public String get(int index) {
                if (!validateIndex(index) || internalGet(index) == null) {
                    return "ERROR";
                }
                return internalGet(index);
            }

            private String internalGet(int index) {
                return memory[index - 1];
            }
            private void internalSet(int index, String body) {
                memory[index - 1] = body;
            }

            public boolean validateIndex(int index) {
                return (index > 0 && index <= memory.length);
            }

            public String execute(Command command) {
                switch (command.action) {
                    case SET: return set(command.index, command.body);
                    case GET: return get(command.index);
                    case DELETE: return delete(command.index);
                }
                return "";

            }

            private String delete(int index) {
                if (!validateIndex(index)) {
                    return "ERROR";
                }
                if (internalGet(index) == null) {
                    return "OK";
                }
                internalSet(index, null);
                return "OK";
            }

        }

        private static Command parse(List<String> collect) {

            int index = Integer.parseInt(collect.get(1));
            switch (collect.get(0).toUpperCase()) {
                case "EXIT" : return new Command(ActionType.EXIT, 0);
                case "GET" : return new Command(ActionType.GET, index);
                case "DELETE" : return new Command(ActionType.DELETE, index);
                case "SET" : return new Command(ActionType.SET, index, collect.get(2));
                default: throw new RuntimeException("Wrong command!");
            }
        }

        private enum  ActionType {
            GET, DELETE, SET, EXIT
        }
        private static class Command {
            public Command(ActionType action, int index) {
                this.action = action;
                this.index = index;
            }

            public Command(ActionType action, int index, String body) {
                this.action = action;
                this.index = index;
                this.body = body;
            }

            String body;
            ActionType action;
            int index;
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/65/stages/350/implement#comment
status: Solved
record: 3
